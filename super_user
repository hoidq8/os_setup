#!/bin/bash
REPO_DIR="$(dirname "$(readlink -m "${0}")")"
user_current=$(logname)
mkdir -p $REPO_DIR/logs $REPO_DIR/data_prepared
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
NC='\033[0m' # Không màu

wifi() {
    cd "$REPO_DIR/wifi" || return
    if nmcli device status | grep -q "wifi"; then
        wifi_rpms=("iw*" "wireless-regdb*" "wpa_supplicant*" "NetworkManager-wifi*")
        for rpm in "${wifi_rpms[@]}"; do
            wifi_file=$(ls $rpm 2>/dev/null | head -n 1)
            if [ -n "$wifi_file" ]; then
                rpm -ivh $wifi_file
            else
                echo "No wifi rpm found"
                break
            fi
        done
        systemctl restart NetworkManager
        sleep 30
        dnf reinstall iw wireless-regdb wpa_supplicant NetworkManager-wifi -y
    fi
}

system() {
    commands() {
        cd "$REPO_DIR/system" || return
        cp rmkernel /usr/bin && chmod +x /usr/bin/rmkernel
    }
    epel() {
        if ! rpm -q epel-release; then
            dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm -y
        fi
    }
    gnome() {
        dnf upgrade -y
        dnf install gnome-shell zsh git gnome-terminal gnome-terminal-nautilus nautilus gnome-disk-utility chrome-gnome-shell PackageKit-command-not-found gnome-software gnome-system-monitor gdm git dbus-x11 gcc gdb ibus-m17n jq -y
    }
    kernel() {
        yum install https://www.elrepo.org/elrepo-release-9.el9.elrepo.noarch.rpm -y
        yum --enablerepo=elrepo-kernel install kernel-ml -y
    }
    shell() {
        chsh -s /bin/zsh $user_current
    }
    run() {
        commands
        epel
        gnome
        kernel
        shell
        systemctl set-default graphical.target
    }
    grep -q "clean_requirements_on_remove=1" /etc/dnf/dnf.conf || echo -e "directive clean_requirements_on_remove=1" >>/etc/dnf/dnf.conf
    find "$REPO_DIR" -type f -print0 | xargs -0 dos2unix --
    run >>$REPO_DIR/logs/system.log 2>&1
}

prepared() {
    cd $REPO_DIR/data_prepared
    repos=(
        "https://github.com/vinceliuice/WhiteSur-gtk-theme.git"
        "https://github.com/vinceliuice/WhiteSur-icon-theme.git"
        "https://github.com/vinceliuice/WhiteSur-cursors.git"
        "https://github.com/dracula/gnome-terminal"
    )
    for repo in "${repos[@]}"; do
        sudo -u "$user_current" git clone "$repo"
    done
    # Download và giải nén fonts
    font_url=$(curl -s https://api.github.com/repos/tonsky/FiraCode/releases/latest | grep browser_download_url | cut -d '"' -f 4)
    sudo -u "$user_current" wget -q "$font_url" -O fira-code.zip
    sudo -u "$user_current" unzip -q fira-code.zip -d fira-code
    # Download oh-my-zsh install script
    sudo -u "$user_current" wget -q https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
    # Download gnome extensions install script
    sudo -u "$user_current" wget -N -q "https://raw.githubusercontent.com/ToasterUwU/install-gnome-extensions/master/install-gnome-extensions.sh" -O ./install-gnome-extensions.sh
    sudo -u "$user_current" chmod +x install-gnome-extensions.sh
}

softwares() {
    microsoft() {
        cd "$REPO_DIR/softwares" || return
        cp vscode.repo microsoft-edge.repo /etc/yum.repos.d/
        dnf install microsoft-edge-stable code -y
    }
    gcm() {
        cd $REPO_DIR/data_prepared/
        gcm_install() {
            curl -s https://api.github.com/repos/git-ecosystem/git-credential-manager/releases/latest | grep "browser_download_url" | grep -v "symbol" | grep "linux" | grep "tar.gz" | cut -d : -f 2,3 | tr -d \" | wget -i -
            gcm_file=$(ls gcm*.tar.gz)
            tar -xvf $gcm_file -C /usr/local/bin
            sudo -u "$user_current" /usr/local/bin/git-credential-manager configure
        }
        if [ command -v git-credential-manager ] &>/dev/null; then
            sudo -u "$user_current" /usr/local/bin/git-credential-manager unconfigure
            sudo rm -rf $(command -v git-credential-manager)
            gcm_install
        else
            gcm_install
        fi
        sudo -u "$user_current" git config --global credential.credentialStore secretservice
    }
    warp() {
        curl -fsSl https://pkg.cloudflareclient.com/cloudflare-warp-ascii.repo | tee /etc/yum.repos.d/cloudflare-warp.repo
        dnf install cloudflare-warp -y
    }
    microsoft
    gcm
    warp
}

bootloader() {
    cd "$REPO_DIR" || return
    [ ! -d /boot/grub2/themes ] && mkdir -p /boot/grub2/themes
    cp -r bootloader /boot/grub2/themes
    cp "$REPO_DIR/bootloader/30_uefi-firmware" /etc/grub.d && chmod 755 /etc/grub.d/30_uefi-firmware
    sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=20/; s/^\(GRUB_TERMINAL\w*=.*\)/#\1/; s/GRUB_CMDLINE_LINUX="rhgb quiet"/GRUB_CMDLINE_LINUX_DEFAULT="intel_idle.max_cstate=1 cryptomgr.notests initcall_debug intel_iommu=igfx_off no_timer_check noreplace-smp page_alloc.shuffle=1 rcupdate.rcu_expedited=1 tsc=reliable quiet splash"/g' /etc/default/grub
    grep -q "/boot/grub2/themes/bootloader/theme.txt" /etc/default/grub || echo "GRUB_THEME=\"/boot/grub2/themes/bootloader/theme.txt\"" >>/etc/default/grub
    grep -q "GRUB_FONT=/boot/grub2/fonts/unicode.pf2" /etc/default/grub || echo -e "GRUB_FONT=/boot/grub2/fonts/unicode.pf2" >>/etc/default/grub
    grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg
}

themes() {
    cd $REPO_DIR/data_prepared/WhiteSur-gtk-theme
    for target in background-default.png background-darken.png; do
        cp $REPO_DIR/themes/intel-processor.jpg src/assets/gnome-shell/backgrounds/$target
    done
    rm -rf /usr/share/themes/red_hat_linux_themes
    gawk -i inplace '!/Yaru/' src/main/gnome-shell/gnome-shell-theme.gresource.xml
    chmod -R 777 src/main/gnome-shell/gnome-shell-theme.gresource.xml
    ./install.sh -n 'rhel' -o normal -i gnome -c Dark -a alt -t default -p 60 -P smaller -s default -b default -m -N mojave -HD --normal --round --right
    ./tweaks.sh -g default -o normal -c Dark -t default -p 60 -P smaller -n -i gnome -b default
    cd $REPO_DIR/themes
    cp intel-core-i9.jpg Lenovo_Legion_Wallpaper.png /usr/share/backgrounds
    cd /usr/share/themes
    rhel_important=$(ls -d /usr/share/themes/rhel*alt)
    mv $rhel_important /usr/share/themes/red_hat_linux_themes
    rm -rf rhel*
    cd red_hat_linux_themes
    rm -rf cinnamon plank gnome-shell
}

icons() {
    cd $REPO_DIR/data_prepared/WhiteSur-icon-theme
    ./install.sh -n 'rhel' -t default -a -b
    cd /usr/share/icons
    rm -rf rhel-dark rhel-light
}

cursors() {
    cd $REPO_DIR/data_prepared/WhiteSur-cursors
    ./install.sh
}

fonts() {
    cd $REPO_DIR/data_prepared/fira-code
    mkdir -p /usr/share/fonts/fira-code-fonts
    cp ttf/FiraCode-SemiBold.ttf /usr/share/fonts/fira-code-fonts
    fc-cache -f -v
    dnf group install "Fonts" -y
}

gdms() {
    settings=(
        "org.gnome.desktop.interface text-scaling-factor 1.25"
        "org.gnome.desktop.interface gtk-theme 'redhat-alt'"
        "org.gnome.desktop.interface icon-theme 'rhel'"
        "org.gnome.desktop.interface cursor-theme 'WhiteSur-cursors'"
        "org.gnome.desktop.interface clock-show-date true"
        "org.gnome.desktop.interface show-battery-percentage true"
        "org.gnome.desktop.interface clock-show-seconds true"
        "org.gnome.desktop.interface clock-show-weekday true"
        "org.gnome.settings-daemon.plugins.power power-button-action 'action'"
        "org.gnome.desktop.peripherals.touchpad tap-to-click true"
        "org.gnome.login-screen disable-user-list true"
        "org.gnome.settings-daemon.plugins.color night-light-enabled true"
        "org.gnome.settings-daemon.plugins.color night-light-temperature 3168"
        "org.gnome.settings-daemon.plugins.color night-light-schedule-from 0.0"
        "org.gnome.settings-daemon.plugins.color night-light-schedule-to 0.0"
        "org.gnome.login-screen banner-message-enable true"
        "org.gnome.login-screen banner-message-text 'LEADER'"
    )
    for setting in "${settings[@]}"; do
        sudo -u gdm dbus-launch gsettings set $setting
    done
    cp $REPO_DIR/gdms/custom.conf /etc/gdm
}

terminal() {
    cd "$REPO_DIR/data_prepared/gnome-terminal" || exit
    id=$(sudo -u "$user_current" gsettings get org.gnome.Terminal.ProfilesList default | tr -d "'")
    profile_path="org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$id/"
    keybindings_path="org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/"
    keybindings=(
        "copy '<Ctrl>C'" "new-tab '<Ctrl>T'" "new-window '<Ctrl>N'" "save-contents '<Ctrl>S'"
        "close-tab '<Ctrl>W'" "close-window '<Ctrl>Q'" "copy-html '<Ctrl>X'" "paste '<Ctrl>V'"
        "select-all '<Ctrl>A'" "preferences '<Ctrl>P'" "find '<Ctrl>F'" "find-next '<Ctrl>G'"
        "find-previous '<Ctrl>H'" "find-clear '<Ctrl>J'"
    )
    profile=(
        "visible-name '$user_current'" "cursor-shape 'ibeam'"
    )
    for binding in "${keybindings[@]}"; do
        sudo -u "$user_current" gsettings set $keybindings_path $binding
    done
    for setting in "${profile[@]}"; do
        sudo -u "$user_current" gsettings set $profile_path $setting
    done
    sudo -u "$user_current" gsettings set org.gnome.desktop.interface enable-hot-corners false
    sudo -u "$user_current" ./install.sh -s Dracula -p "$user_current" --skip-dircolors
    for file in .zshrc .spaceshiprc.zsh; do
        sudo -u "$user_current" cp "$REPO_DIR/create_users/$file" "/home/$user_current/$file"
    done
}

accessibility() {
    interface_settings=(
        "text-scaling-factor 1.25"
        "gtk-theme 'redhat-alt'"
        "icon-theme 'rhel'"
        "cursor-theme 'WhiteSur-cursors'"
        "clock-show-date true"
        "show-battery-percentage true"
        "clock-show-seconds true"
        "clock-show-weekday true"
    )
    for setting in "${interface_settings[@]}"; do
        sudo -u "$user_current" gsettings set org.gnome.desktop.interface $setting
    done
    sudo -u "$user_current" bash -c 'gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click true'
    sudo -u "$user_current" gsettings set org.gnome.desktop.session idle-delay 1800
    sudo -u "$user_current" gsettings set org.gnome.desktop.sound allow-volume-above-100-percent true
    sudo -u "$user_current" gsettings set org.gnome.desktop.input-sources show-all-sources true
    sudo -u "$user_current" gsettings set org.gnome.desktop.input-sources sources "[('ibus', 'm17n:vi:telex'), ('xkb', 'us')]"
    sudo -u "$user_current" gsettings set org.gnome.desktop.interface locate-pointer true
    sudo -u "$user_current" gsettings set org.gnome.desktop.wm.preferences button-layout 'close,minimize,maximize:appmenu'
}

check_and_run() {
    local task_name="$1"
    local log_file="$REPO_DIR/logs/$task_name.log"
    if grep -q "Task completed" "$log_file" 2>/dev/null; then
        echo "$task_name already completed, skipping."
        echo -ne ""
    else
        echo -e "${YELLOW}Task $task_name: Start${NC}"
        if $task_name &>"$log_file"; then
            echo -e "\033[A\033[K${GREEN}Task $task_name: Done${NC}"
            echo "Task completed" >>"$log_file"
        else
            echo "Task $task_name encountered an error. Check $log_file for details."
            exit 1
        fi
    fi
}

tasks=("wifi" "system" "prepared" "softwares" "bootloader" "themes" "fonts" "gdms" "terminal" "accessibility")
for task in "${tasks[@]}"; do
    check_and_run "$task"
done

echo "All tasks completed successfully."
