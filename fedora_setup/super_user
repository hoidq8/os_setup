#!/bin/bash
source $(pwd)/variables

if [ "$EUID" -ne 0 ]; then
    exit 1
else
    system() {
        dnf upgrade -y
        cd $REPO_DIR || return
        cp fedora_repositories.repo /etc/yum.repos.d/
        commands() {
            cp rmkernel /usr/local/bin
            chmod +x /usr/local/bin/rmkernel
        }
        packages() {
            dnf install gnome-terminal gnome-terminal-nautilus gnome-shell git nautilus gnome-disk-utility gnome-browser-connector gnome-system-monitor gdm git dbus-x11 ibus-m17n jq gnome-extensions-app.x86_64 zsh gnome-tweaks -y # conky eza fzf cockpit pam_yubico keepassxc pamu2fcfg
            dnf group install "Firefox Web Browser" "Hardware Support" "Common NetworkManager Submodules" -y
            systemctl set-default graphical.target
            systemctl enable --now cockpit.socket
        }
        shell() {
            chsh -s /bin/zsh $user_current
            # chsh -s /bin/zsh $USER
        }
        run() {
            packages
            commands
            shell
        }
        grep -q "clean_requirements_on_remove=1" /etc/dnf/dnf.conf || echo -e "directive clean_requirements_on_remove=1" >>/etc/dnf/dnf.conf
        find "$REPO_DIR" -type f -print0 | xargs -0 dos2unix --
        run >>$REPO_DIR/logs/system.log 2>&1
        cd $REPO_DIR || return
    }

    softwares() {
        cd $REPO_DIR || return
        microsoft() {
            cp vscode.repo microsoft-edge.repo /etc/yum.repos.d/
            dnf install code microsoft-edge-stable -y
        }
        gcm() {
            mkdir -p $REPO_DIR/gcm_install
            cd $REPO_DIR/gcm_install
            gcm_install() {
                curl -s https://api.github.com/repos/ldennington/git-credential-manager/releases/latest |
                    grep -E 'browser_download_url.*gcm-linux.*[0-9].[0-9].[0-9].tar.gz' |
                    cut -d : -f 2,3 |
                    tr -d \" |
                    xargs -I 'url' curl -LO 'url'
                gcm_file=$(ls gcm*.tar.gz)
                tar -xvf $gcm_file -C /usr/local/bin
                /usr/local/bin/git-credential-manager configure
            }
            if [ command -v git-credential-manager ] &>/dev/null; then
                /usr/local/bin/git-credential-manager unconfigure
                rm -rf $(command -v git-credential-manager)
                gcm_install
            else
                gcm_install
            fi
            git config --global credential.credentialStore secretservice
        }
        warp() {
            curl -fsSl https://pkg.cloudflareclient.com/cloudflare-warp-ascii.repo | tee /etc/yum.repos.d/cloudflare-warp.repo
            dnf install cloudflare-warp -y
        }
        # microsoft
        gcm
        warp
        cd $REPO_DIR || return
        rm -rf gcm_install
    }

    bootloader() {
        cd "$REPO_DIR" || return
        [ ! -d /boot/grub2/themes ] && mkdir -p /boot/grub2/themes
        rm -rf /boot/grub2/themes/*
        cp -f 30_uefi-firmware /etc/grub.d && chmod 755 /etc/grub.d/30_uefi-firmware
        cp -r dedsec /boot/grub2/themes
        sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=99/; s/^\(GRUB_TERMINAL\w*=.*\)/#\1; /g' /etc/default/grub
        grep -q "/boot/grub2/themes/dedsec/theme.txt" /etc/default/grub || echo "GRUB_THEME=\"/boot/grub2/themes/dedsec/theme.txt\"" >>/etc/default/grub
        if ! grep -q "GRUB_FONT=/boot/grub2/fonts/unicode.pf2" /etc/default/grub; then
            sh -c 'echo -e "GRUB_FONT=/boot/grub2/fonts/unicode.pf2" >> /etc/default/grub'
        fi
        dnf reinstall grub2-efi -y
        grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg
        cd "$REPO_DIR" || return
    }

    themes() {
        cd "$REPO_DIR" || return
        mkdir -p themes_custom
        cd themes_custom
        mkdir -p WhiteSur-gtk-theme && curl -L $(curl -s https://api.github.com/repos/vinceliuice/WhiteSur-gtk-theme/releases/latest | grep "tarball" | cut -d '"' -f 4) | tar -xz -C WhiteSur-gtk-theme --strip-components=1
        cd WhiteSur-gtk-theme
        for target in background-default.png background-darken.png; do
            cp $REPO_DIR/intel-processor.jpg src/assets/gnome-shell/backgrounds/$target
        done
        rm -rf /usr/share/themes/fedora_themes
        gawk -i inplace '!/Yaru/' src/main/gnome-shell/gnome-shell-theme.gresource.xml
        ./install.sh -n 'WoW' -c Dark -a alt -t default -m -N mojave -HD --round --right --shell -i fedora -b default -h smaller -normal
        ./tweaks.sh -g default -o solid -c Dark -t default -p 60 -P smaller -n -i fedora -b default
        # ./tweaks.sh -f adaptive
        cd /usr/share/themes
        fedora_important=$(ls -d /usr/share/themes/WoW-Dark-alt)
        mv $fedora_important /usr/share/themes/fedora_themes
        rm -rf WoW*
        cd fedora_themes
        rm -rf cinnamon plank gnome-shell
        cd "$REPO_DIR" || return
        rm -rf themes_custom
    }

    icons() {
        cd "$REPO_DIR" || return
        mkdir -p icons_custom
        cd icons_custom
        mkdir -p WhiteSur-icon-theme && curl -L $(curl -s https://api.github.com/repos/vinceliuice/WhiteSur-icon-theme/releases/latest | grep "tarball" | cut -d '"' -f 4) | tar -xz -C WhiteSur-icon-theme --strip-components=1
        rm -rf /usr/share/icons/fedora_icons
        cd WhiteSur-icon-theme
        ./install.sh -n 'fedora_icons' -t default -a -b
        cd /usr/share/icons
        rm -rf fedora_icons-{dark,light}
        cd "$REPO_DIR" || return
        rm -rf icons_custom
    }

    cursors() {
        cd "$REPO_DIR" || return
        mkdir -p cursors_custom
        cd cursors_custom
        wget $(curl -s https://api.github.com/repos/ful1e5/apple_cursor/releases/latest | grep "browser_download_url.*macOS.tar.xz" | cut -d '"' -f 4) && tar -xvf macOS.tar.xz
        rm -rf /usr/share/icons/fedora_cursors
        cp -r macOS /usr/share/icons/
        cd /usr/share/icons/
        mv macOS fedora_cursors
        cd "$REPO_DIR" || return
        rm -rf cursors_custom
    }

    fonts() {
        cd "$REPO_DIR" || return
        mkdir -p fonts_custom
        cd fonts_custom
        mkdir -p fira-code-nerd && wget $(curl -s https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest | grep browser_download_url | grep "FiraCode*.tar.xz" | cut -d '"' -f 4) -O fira-code-nerd.tar.xz && tar -xvf fira-code-nerd.tar.xz -C fira-code-nerd
        cd fira-code-nerd
        mkdir -p /usr/share/fonts/fira-code-nerd-fonts
        cp FiraCodeNerdFontMono-SemiBold.ttf /usr/share/fonts/fira-code-nerd-fonts
        fc-cache -f -v
        dnf group install "Fonts" -y
        cd "$REPO_DIR" || return
        # abattis-cantarell-fonts.noarch adobe-source-code-pro-fonts.noarch dejavu-sans-fonts.noarch dejavu-sans-mono-fonts.noarch dejavu-serif-fonts.noarch fontconfig.x86_64 fonts-filesystem.noarch google-droid-sans-fonts.noarch google-noto-fonts-common.noarch google-noto-sans-gurmukhi-fonts.noarch google-noto-sans-sinhala-vf-fonts.noarch jomolhari-fonts.noarch julietaula-montserrat-fonts.noarch khmer-os-system-fonts.noarch libXfont2.x86_64 liberation-fonts-common.noarch liberation-mono-fonts.noarch liberation-sans-fonts.noarch liberation-serif-fonts.noarch libfontenc.x86_64 lohit-assamese-fonts.noarch lohit-bengali-fonts.noarch lohit-devanagari-fonts.noarch lohit-gujarati-fonts.noarch lohit-kannada-fonts.noarch lohit-odia-fonts.noarch lohit-tamil-fonts.noarch lohit-telugu-fonts.noarch paktype-naskh-basic-fonts.noarch pt-sans-fonts.noarch sil-abyssinica-fonts.noarch sil-nuosu-fonts.noarch sil-padauk-fonts.noarch stix-fonts.noarch urw-base35-bookman-fonts.noarch urw-base35-c059-fonts.noarch urw-base35-d050000l-fonts.noarch urw-base35-fonts.noarch urw-base35-fonts-common.noarch urw-base35-gothic-fonts.noarch urw-base35-nimbus-mono-ps-fonts.noarch urw-base35-nimbus-roman-fonts.noarch urw-base35-nimbus-sans-fonts.noarch urw-base35-p052-fonts.noarch urw-base35-standard-symbols-ps-fonts.noarch urw-base35-z003-fonts.noarch google-noto-sans-fonts
        cd $REPO_DIR/
        rm -rf fonts_custom
    }

    gdms() {
        cd "$REPO_DIR" || return
        settings=(
            "org.gnome.desktop.interface text-scaling-factor 1.25"
            "org.gnome.desktop.interface gtk-theme 'fedora_themes'"
            "org.gnome.desktop.interface icon-theme 'fedora_icons'"
            "org.gnome.desktop.interface cursor-theme 'fedora_cursors'"
            "org.gnome.desktop.interface clock-show-date true"
            "org.gnome.desktop.interface show-battery-percentage true"
            "org.gnome.desktop.interface clock-show-seconds true"
            "org.gnome.desktop.interface clock-show-weekday true"
            "org.gnome.settings-daemon.plugins.power power-button-action 'action'"
            "org.gnome.desktop.peripherals.touchpad tap-to-click true"
            "org.gnome.login-screen disable-user-list true"
            # "org.gnome.settings-daemon.plugins.color night-light-enabled true"
            # "org.gnome.settings-daemon.plugins.color night-light-temperature 3168"
            # "org.gnome.settings-daemon.plugins.color night-light-schedule-from 0.0"
            # "org.gnome.settings-daemon.plugins.color night-light-schedule-to 0.0"
            "org.gnome.login-screen banner-message-enable true"
            "org.gnome.login-screen banner-message-text 'Leader_H'"
        )
        for setting in "${settings[@]}"; do
            sudo -u gdm dbus-launch gsettings set $setting
        done
        cp custom.conf /etc/gdm
    }

    remove_packages() {
        dnf autoremove vim-common vim-enhanced vi sassc glib2-devel ImageMagick dialog inkscape optipng -y
        dnf install PackageKit-command-not-found gnome-software -y
    }

    check_and_add_pam_u2f() {
        local pam_line="auth    sufficient    pam_u2f.so    cue"
        local pam_files=(
            "/etc/pam.d/sudo"
            "/etc/pam.d/gdm-password"
            "/etc/pam.d/system-auth"
            # "/etc/pam.d/sshd"
        )
        for pam_file in "${pam_files[@]}"; do
            if ! grep -qF "$pam_line" "$pam_file"; then
                echo "$pam_line" | cat - "$pam_file" >temp && mv temp "$pam_file"
            fi
        done
    }

    mount_windows_partition() {
        local partition_name="Windows_H"
        local mount_point="/home/$user_current/Prj/Windows_H"
        local partition_uuid=$(blkid -o value -s UUID -t LABEL="$partition_name")

        if [ -n "$partition_uuid" ]; then
            mkdir -p "$mount_point"

            if ! grep -q "$partition_uuid" /etc/fstab; then
                echo "UUID=$partition_uuid  $mount_point  ntfs-3g  defaults,uid=$(id -u $user_current),gid=$(id -g $user_current),umask=022  0  0" >>/etc/fstab
            fi

            mount -a
        fi
    }

    tasks=(
        "system"
        "softwares"
        "bootloader"
        "themes"
        "icons"
        "cursors"
        "fonts"
        "gdms"
        # "check_and_add_pam_u2f"
        # "mount_windows_partition"
        "remove_packages"
    )

    for task in "${tasks[@]}"; do
        check_and_run "$task"
    done
    chmod -R 777 $REPO_DIR/logs
fi
