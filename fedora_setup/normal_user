#!/bin/bash
source $(pwd)/variables

yubico() {
    rm -rf $HOME/Prj/Yubico
    cd "$HOME/Prj" || return
    wget $(curl -s https://api.github.com/repos/Yubico/yubioath-flutter/releases/latest | grep "browser_download_url" | grep "linux" | grep "tar.gz" | cut -d '"' -f 4)
    yubico_compress=$(ls -d *.tar.gz)
    dir_name=$(basename $yubico_compress .tar.gz)
    mkdir -p Yubico/$dir_name
    tar -xzvf $yubico_compress -C Yubico/$dir_name --strip-components=1
    rm -rf *.tar.gz *.tar.gz.sig
}

ohmyzsh_user() {
    if rpm -q zsh >/dev/null 2>&1; then
        rm -rf $HOME/.zshrc.pre-oh-my-zsh*
        if [ ! -d "$HOME/.oh-my-zsh" ]; then
            mkdir -p $REPO_DIR/ohmyzsh
            cd $REPO_DIR/ohmyzsh
            wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
            sh install.sh --unattended
            declare -a gitarray
            gitarray=(
                'zsh-users/zsh-syntax-highlighting.git '$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting''
                'zsh-users/zsh-autosuggestions '$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions''
                'spaceship-prompt/spaceship-prompt.git '$HOME/.oh-my-zsh/custom/themes/spaceship-prompt''
                'TamCore/autoupdate-oh-my-zsh-plugins '$HOME/.oh-my-zsh/custom/plugins/autoupdate''
            )
            for i in "${gitarray[@]}"; do
                echo $(git clone https://github.com/$i)
            done
            ln -s $HOME/.oh-my-zsh/custom/themes/spaceship-prompt/spaceship.zsh-theme $HOME/.oh-my-zsh/custom/themes/spaceship.zsh-theme
            rm -rf $HOME/.oh-my-zsh/themes
        else
            cd $HOME/.oh-my-zsh
            git pull
        fi
        cd $REPO_DIR/
        rm -rf $REPO_DIR/ohmyzsh
        cp -f zsh_shell/_user.zshrc $HOME/.zshrc
        cp -f zsh_shell/.user_spaceshiprc.zsh $HOME/.spaceshiprc.zsh
    fi
}

terminal() {
    id=$(gsettings get org.gnome.Terminal.ProfilesList default | tr -d "'")
    gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$id/ visible-name "'$user_current'"
    gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$id/ cursor-shape "'ibeam'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ copy "'<Ctrl>C'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ new-tab "'<Ctrl>T'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ new-window "'<Ctrl>N'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ save-contents "'<Ctrl>S'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ close-tab "'<Ctrl>W'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ close-window "'<Ctrl>Q'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ copy-html "'<Ctrl>X'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ paste "'<Ctrl>V'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ select-all "'<Ctrl>A'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ preferences "'<Ctrl>P'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ find "'<Ctrl>F'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ find-next "'<Ctrl>G'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ find-previous "'<Ctrl>H'"
    gsettings set org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/ find-clear "'<Ctrl>J'"
    cd $REPO_DIR/
    git clone https://github.com/dracula/gnome-terminal
    cd gnome-terminal
    ./install.sh -s Dracula -p $user_current --skip-dircolors
    cd $REPO_DIR/
    rm -rf gnome-terminal
}

accessibility() {
    if [ -d "/usr/share/themes/fedora_themes" ]; then
        gsettings set org.gnome.desktop.interface gtk-theme 'fedora_themes'
    fi
    if [ -d "/usr/share/icons/fedora_icons" ]; then
        gsettings set org.gnome.desktop.interface icon-theme 'fedora_icons'
    fi
    if [ -d "/usr/share/icons/fedora_cursors" ]; then
        gsettings set org.gnome.desktop.interface cursor-theme 'fedora_cursors'
    fi
    mkdir -p $HOME/.local/share/backgrounds
    cp $REPO_DIR/backgrounds/Lenovo_Legion_Wallpaper.png $HOME/.local/share/backgrounds
    cd $REPO_DIR/icons_extensions
    mkdir -p $HOME/.icons
    cp -r * $HOME/.icons
    gsettings set org.gnome.desktop.interface text-scaling-factor 1.25
    gsettings set org.gnome.desktop.interface clock-show-date true
    gsettings set org.gnome.desktop.interface show-battery-percentage true
    gsettings set org.gnome.desktop.interface clock-show-seconds true
    gsettings set org.gnome.desktop.interface clock-show-weekday true
    gsettings set org.gnome.desktop.interface enable-hot-corners false
    gsettings set org.gnome.desktop.interface locate-pointer true
    gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click true
    gsettings set org.gnome.desktop.session idle-delay 0
    gsettings set org.gnome.desktop.sound allow-volume-above-100-percent true
    gsettings set org.gnome.desktop.input-sources show-all-sources true
    gsettings set org.gnome.desktop.wm.preferences button-layout 'close,minimize,maximize:appmenu'
    gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled true
    gsettings set org.gnome.settings-daemon.plugins.color night-light-temperature 2595
    gsettings set org.gnome.settings-daemon.plugins.color night-light-schedule-from 0.0
    gsettings set org.gnome.settings-daemon.plugins.color night-light-schedule-to 0.0
    cd $REPO_DIR/
}

gnome_extensions() {
    cd $REPO_DIR/
    wget -N -q "https://raw.githubusercontent.com/ToasterUwU/install-gnome-extensions/master/install-gnome-extensions.sh" -O ./install-gnome-extensions.sh
    chmod +x install-gnome-extensions.sh
    declare -a extensions
    extensions=(
        '3628'
        '1160'
        '3843'
        '3010'
        '4679'
        '3733'
        '6272'
    )
    for i in "${extensions[@]}"; do
        echo $(./install-gnome-extensions.sh -e -o -u $i)
    done
    sed -i "s/panel = Main.panel._rightBox;/panel = Main.panel._centerBox;/g" $HOME/.local/share/gnome-shell/extensions/system-monitor-next@paradoxxx.zero.gmail.com/extension.js
    cd $REPO_DIR
    rm -rf install-gnome-extensions.sh
}

keybinding() {
    KEY0_PATH="org.gnome.settings-daemon.plugins.media-keys.custom-keybinding"
    KEY_PATH="/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings"
    gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings \
        "['$KEY_PATH/custom0/']"
    gsettings set $KEY0_PATH:$KEY_PATH/custom0/ name "GNOME Terminal"
    gsettings set $KEY0_PATH:$KEY_PATH/custom0/ command "gnome-terminal"
    gsettings set $KEY0_PATH:$KEY_PATH/custom0/ binding "<Primary><Alt>T"
}

update_firefox_userChrome() {
    local file_path="$HOME/.mozilla/firefox/firefox-themes/userChrome.css"
    local new_code='#sidebar-header {
        display: none;
    }

    #sidebar-box {
        min-width: 100px !important;
    }

    #TabsToolbar {
        visibility: collapse !important;
    }'

    if [ -f "$file_path" ]; then
        if ! grep -qF -- "$new_code" "$file_path"; then
            echo "$new_code" >>"$file_path"
            echo "Đã thêm đoạn mã vào tệp userChrome.css."
        else
            echo "Đoạn mã đã tồn tại trong tệp userChrome.css."
        fi
    else
        echo "Tệp userChrome.css không tồn tại."
    fi
}

bookmark_nautilus() {
    bookmarks_file="/home/$user_current/.config/gtk-3.0/bookmarks"
    folders=(
        "/home/$user_current/Prj"
        "/home/$user_current/Prj/Windows_H"
        "/home/$user_current/Prj/Yubico"
        "/"
    )
    check_and_add_bookmark() {
        folder_path="$1"
        if [ -d "$folder_path" ] && ! grep -q "file://$folder_path" "$bookmarks_file"; then
            echo "file://$folder_path" >>"$bookmarks_file"
            echo "Đã thêm $folder_path vào bookmark."
        else
            echo "$folder_path đã có hoặc thư mục không tồn tại."
        fi
    }

    for folder in "${folders[@]}"; do
        check_and_add_bookmark "$folder"
    done
}

tasks=(
    "yubico"
    "ohmyzsh_user"
    "terminal"
    "accessibility"
    "gnome_extensions"
    "keybinding"
    # "update_firefox_userChrome"
    "bookmark_nautilus"
)

for task in "${tasks[@]}"; do
    check_and_run "$task"
done
