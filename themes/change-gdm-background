#!/usr/bin/env bash
# Original author: Thiago Silva
# Original URL: https://github.com/thiggy01/change-gdm-background
# Modified for Fedora by Ige
# =================================================================== #

# Check if the script is run as root.
if [ "$(id -u)" -ne 0 ]; then
    echo 'This script must be run as root or with the sudo command.'
    exit 1
fi

# Check what Linux distro is being used.
# distro="$(lsb_release -c | cut -f 2)"
# if ! [[ "$distro" =~ (focal|groovy|hirsute) ]]; then
#     echo 'Sorry, this script only works with focal, groovy or hirsute distros.'
#     exit 1
# fi

# Check if Glib 2 development libraries are installed.
if [ ! -x "$(command -v glib-compile-resources)" ]; then
    echo 'Glib 2 development libraries need to be installed.'
    read -p 'Type y or Y to proceed. Any other key to exit: ' -n 1
    if [[ "$REPLY" =~ ^[yY]$ ]]; then
        dnf install glib2-devel
    else
        echo "This tool can't run without the required libraries"
        echo "Exiting."
        echo
        exit 1
    fi
fi

# Assign the default GDM theme file path.
gdm3Resource=/usr/share/gnome-shell/gnome-shell-theme.gresource
# if [ "$(lsb_release -i | awk '{print $3}')" == 'Ubuntu' ]; then
#     gdm3Resource=/usr/share/gnome-shell/theme/Yaru/gnome-shell-theme.gresource
# elif [ "$(lsb_release -i | awk '{print $3}')" == 'Pop' ]; then
#     gdm3Resource=/usr/share/gnome-shell/theme/Pop/gnome-shell-theme.gresource
# fi

# Create a backup file of the original theme if there isn't one.
[ ! -f "$gdm3Resource"~ ] && cp "$gdm3Resource" "$gdm3Resource~"

# Restore backup function.
restore() {
    mv "$gdm3Resource~" "$gdm3Resource"
    if [ "$?" -eq 0 ]; then
        chmod 644 "$gdm3Resource"
        echo 'GDM background successfully restored.'
    fi
}

# Restore the original GDM theme.
[ "$1" == "--restore" ] && restore

# Define main variables.
gdm3xml=$(basename "$gdm3Resource").xml
workDir="/tmp/gdm3-theme"

# Create directories from a resource list.
CreateDirs() {
    for resource in $(gresource list "$gdm3Resource~"); do
        resource="${resource#\/org\/gnome\/shell\/}"
        if [ ! -d "$workDir"/"${resource%/*}" ]; then
            mkdir -p "$workDir"/"${resource%/*}"
        fi
    done
}

# Extract resources from a gresource binary file.
ExtractRes() {
    for resource in $(gresource list "$gdm3Resource~"); do
        gresource extract "$gdm3Resource~" "$resource" > \
            "$workDir"/"${resource#\/org\/gnome\/shell\/}"
    done
}

# Compile resources into a gresource binary file.
CompileRes() {
    glib-compile-resources --sourcedir=$workDir/theme/ $workDir/theme/"$gdm3xml"
}

# Move the newly created resource into its default place.
MoveRes() {
    mv $workDir/theme/gnome-shell-theme.gresource $gdm3Resource
}

# Check if gresource was successfully moved to its default folder.
Check() {
    if [ "$?" -eq 0 ]; then
        # Set permissions.
        chmod 644 "$gdm3Resource"
        echo 'GDM background sucessfully changed.'
    else
        # If something went wrong, restore the backup file.
        echo 'Something went wrong.'
        restore
        echo 'No changes were applied.'
    fi
}

CleanUp() {
    # Remove temporary directories and files.
    rm -r "$workDir"
    exit 0
}

# Test if argument is an image file.
if [[ $(file --mime-type -b "$1") == image/*g ]]; then

    # Define image variables.
    gdmBgImg=$(realpath "$1")
    imgFile=$(basename "$gdmBgImg")

    # Call procedures to create directories and extract resources into them.
    CreateDirs
    ExtractRes

    # Copy the selected image to the resources directory.
    cp "$gdmBgImg" "$workDir"/theme

    # Change the GDM background to the specified image.
    oldBg="#lockDialogGroup \{.*?\}"
    newBg="#lockDialogGroup {
	background: url('resource:\/\/\/org\/gnome\/shell\/theme\/$imgFile');
	background-size: cover; }"
    perl -i -0777 -pe "s/$oldBg/$newBg/s" "$workDir"/theme/gnome-shell.css

    # Generate the gresource XML file.
    echo '<?xml version="1.0" encoding="UTF-8"?>
<gresources>
    <gresource prefix="/org/gnome/shell/theme">' >"$workDir"/theme/"$gdm3xml"
    for file in $(gresource list "$gdm3Resource~"); do
        echo "        <file>${file#\/org\/gnome/shell\/theme\/}</file>" \
            >>"$workDir"/theme/"$gdm3xml"
    done
    echo "        <file>$imgFile</file>" >>"$workDir"/theme/"$gdm3xml"
    echo '    </gresource>
</gresources>' >>"$workDir"/theme/"$gdm3xml"

    # Compile the new gresource.
    CompileRes

    # Move gresource to the default place.
    MoveRes

    # Check if everything was successful.
    Check

    # Remove temporary files and exit.
    CleanUp

# Change background colors.
elif [[ "$1" =~ ^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$ ]]; then

    # Store the selected background color.
    BgColor="$1"

    CreateDirs
    ExtractRes

    # Change the GDM background to the specified color.
    oldBg="#lockDialogGroup \{.*?\}"
    newBg="#lockDialogGroup {
	background: $BgColor;
	background-size: cover; }"
    perl -i -0777 -pe "s/$oldBg/$newBg/s" "$workDir"/theme/gnome-shell.css

    # Generate the gresource XML file.
    echo '<?xml version="1.0" encoding="UTF-8"?>
<gresources>
    <gresource prefix="/org/gnome/shell/theme">' >"$workDir"/theme/"$gdm3xml"
    for file in $(gresource list "$gdm3Resource~"); do
        echo "        <file>${file#\/org\/gnome/shell\/theme\/}</file>" \
            >>"$workDir"/theme/"$gdm3xml"
    done
    echo '    </gresource>
</gresources>' >>"$workDir"/theme/"$gdm3xml"

    # Compile the new gresource.
    CompileRes

    # Move gresource to the default place.
    MoveRes

    # Remove temporary files and exit.
    CleanUp

else

    # If no valid image file or hex code was specified, show this message.
    echo 'Image file not found or invalid color hex code.'
    echo 'Please specify a .jpg or .png image file or a valid hex code.'
    echo 'Usage: sudo ./change-gdm-background /path/to/image.*g'
    echo "Usage: sudo ./change-gdm-background '#yourhexcode'"

fi
